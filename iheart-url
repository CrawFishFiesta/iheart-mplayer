#! /usr/bin/env python3

import parse_iheart_json

import urllib.error
import argparse
import subprocess
import logging

# Something that will cause a player to error out, written to stdout when we
# can't get a real station URL for some reason
BAD_STATION = "no://station/found"

def dump_station_details (station, dumpfunc = print):
	dumpfunc ("station name:", station['name'])
	dumpfunc ("call letters:", station['callLetters'])
	dumpfunc ("location:", station['city'], station['state'], station['countries'])
	dumpfunc ("description:", station['description'])
	dumpfunc ("broadcast format:", station['format'])

	dumpfunc ("available stream types:", end = ' ')
	for st in station['streams']:
		dumpfunc (st, end = ' ')

def print_url (station_id):
	station = None
	attempts = 0

	# Attempt to compensate for random HTTP 500 errors from iheart
	while (attempts < 3):
		try:
			station = parse_iheart_json.station_info (station_id)
			break
		except urllib.error.HTTPError as inst:
			logging.warning ("http error from iheart server; retrying:")
			logging.warning (inst)
			attempts += 1
	else:
		logging.error ("could not get station URL")
		print (BAD_STATION)
		return

	if (args.verbose):
		try:
			dump_station_details (station, dumpfunc = logging.debug)
			if (args.verbose >= 3):
				logging.debug ("full dictionary dump:")
				logging.debug (station)
		except KeyError:
			logging.warning ("a field is missing")
			# at >2 we've done this already
			if (args.verbose == 2):
				logging.debug ("full dictionary dump:")
				logging.debug (station)

	try:
		station_url = parse_iheart_json.get_station_url (station)
	except KeyError:
		logging.error ("requested stream does not exist for this station")
		# at >2 we've done this already
		if (args.verbose == 2):
			logging.debug ("full dictionary dump:")
			logging.debug (station)
		print (BAD_STATION)
		return

	print (station_url)

if (__name__ == '__main__'):

	parser = argparse.ArgumentParser (description="Print the audio stream URL for an iheartradio station")

	# Optional arguments
	parser.add_argument (
		'-v', '--verbose',
		action='count',
		help="Display extra information",
		)
	parser.add_argument (
		'-i', '--info',
		action='store_true',
		help="Instead of printing the stream URL for the station, output some information about it",
		)

	# The three required arguments; one and only one must be given
	action = parser.add_mutually_exclusive_group(required=True)
	action.add_argument (
		'station_id',
		nargs='?',
		type=int,
		help="The (five-digit?) ID number of the station",
		)
	action.add_argument (
		'-s', '--search',
		metavar='TERMS',
		help="List station search results for TERMS"
		)
	action.add_argument (
		'-l', '--lucky',
		metavar='TERMS',
		help="\"I\'m feeling lucky\" search for TERMS (print URL for the first result)"
		)

	args = parser.parse_args ()

	logging.basicConfig (format = "%(levelname)s".lower () + ": %(message)s")

	if (args.verbose):
		# Turn on all the debug prints
		logging.basicConfig (level = logging.DEBUG)

	if (args.search):
		results = parse_iheart_json.station_search (args.search)

		print ("hits:", results['totalStations'])
		for station in results['stations']:
			if (args.verbose):
				print ("\n-- name:", station['name'], "id:" + str(station['id']))
				print ('\t', "callsign:", station['callLetters'])
				print ('\t', "frequency:", station['frequency'])
				print ('\t', "city:", station['city'])
				print ('\t', "state:", station['state'])
				print ('\t', "description:", station['description'])
				print ('\t', "relevancy score:", station['score'])
			else:
				print (station['name'], '\t', station['description'], "id:" + str(station['id']))
	else:
		if (args.lucky):
			results = parse_iheart_json.station_search (args.lucky)

			# iheart will not necessarily decide that one match is
			# "best" for us
			if (results['bestMatch'] is not None):
				station_id = (results['bestMatch']['id'])
			else:
				logging.error ("no stations found for \"I'm feeling lucky\" search")
				print (BAD_STATION)
				exit ()
		else:
			station_id = args.station_id

		if (args.info):
			try:
				dump_station_details (parse_iheart_json.station_info (station_id))
			except KeyError:
				logging.info ("error: requested stream does not exist for this station")
				# at >2 we've done this already
				if (args.verbose == 2):
					logging.info ("full dictionary dump:")
					logging.info (station)
		else:
			print_url (station_id)
